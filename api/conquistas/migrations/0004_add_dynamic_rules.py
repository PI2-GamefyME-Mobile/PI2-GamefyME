# Generated by Django on 2025-10-24
from django.db import migrations, models


def seed_dynamic_rules(apps, schema_editor):
    Conquista = apps.get_model('conquistas', 'Conquista')
    mapping = {
        'ATIVIDADE CUMPRIDA': {
            'regra': 'atividades_concluidas_total', 'parametro': 1
        },
        'PRODUTIVIDADE EM ALTA': {
            'regra': 'atividades_concluidas_total', 'parametro': 10
        },
        'RECORRÊNCIA - DE NOVO!': {
            'regra': 'recorrentes_concluidas_total', 'parametro': 5
        },
        'USUÁRIO HARDCORE': {
            'regra': 'dificuldade_concluidas_total', 'parametro': 5, 'dificuldade_alvo': 'muito_dificil'
        },
        'DESAFIANTE AMADOR': {
            'regra': 'desafios_concluidos_total', 'parametro': 1
        },
        'CAMPEÃO SEMANAL': {
            'regra': 'desafios_concluidos_por_tipo', 'parametro': 1, 'tipo_desafio_alvo': 'semanal'
        },
        'MISSÃO CUMPRIDA': {
            'regra': 'desafios_concluidos_por_tipo', 'parametro': 1, 'tipo_desafio_alvo': 'mensal'
        },
        'DESAFIANTE MESTRE': {
            'regra': 'desafios_concluidos_total', 'parametro': 50
        },
        'UM DIA APÓS O OUTRO': {
            'regra': 'streak_conclusao', 'parametro': 5
        },
        'RITUAL SEMANAL': {
            'regra': 'streak_criacao', 'parametro': 7
        },
        'CONSISTÊNCIA INABALÁVEL': {
            'regra': 'streak_conclusao', 'parametro': 15
        },
        'POMODORO INICIANTE': {
            'regra': 'pomodoro_concluidas_total', 'parametro': 1, 'pomodoro_minutos': 60
        },
        'POMODORO DEDICADO': {
            'regra': 'pomodoro_concluidas_total', 'parametro': 5, 'pomodoro_minutos': 60
        },
        'POMODORO MESTRE': {
            'regra': 'pomodoro_concluidas_total', 'parametro': 20, 'pomodoro_minutos': 60
        },
    }
    for c in Conquista.objects.all():
        nm = (c.nmconquista or '').upper()
        if nm in mapping:
            for k, v in mapping[nm].items():
                setattr(c, k, v)
            if c.parametro is None:
                c.parametro = 1
            if c.pomodoro_minutos is None:
                c.pomodoro_minutos = 60
            c.save()


class Migration(migrations.Migration):

    dependencies = [
        ('conquistas', '0003_alter_conquista_nmimagem'),
    ]

    operations = [
        migrations.AddField(
            model_name='conquista',
            name='regra',
            field=models.CharField(blank=True, choices=[('atividades_concluidas_total', 'Atividades concluídas (total)'), ('recorrentes_concluidas_total', 'Atividades recorrentes concluídas (total)'), ('dificuldade_concluidas_total', 'Atividades concluídas por dificuldade (total)'), ('desafios_concluidos_total', 'Desafios concluídos (total)'), ('desafios_concluidos_por_tipo', 'Desafios concluídos por tipo'), ('streak_conclusao', 'Streak de conclusão de atividades'), ('streak_criacao', 'Streak de criação de atividades'), ('pomodoro_concluidas_total', 'Atividades (>= min) concluídas (total)')], max_length=50, null=True),
        ),
        migrations.AddField(
            model_name='conquista',
            name='parametro',
            field=models.SmallIntegerField(default=1),
        ),
        migrations.AddField(
            model_name='conquista',
            name='periodo',
            field=models.CharField(blank=True, choices=[('diario', 'Diário'), ('semanal', 'Semanal'), ('mensal', 'Mensal')], max_length=10, null=True),
        ),
        migrations.AddField(
            model_name='conquista',
            name='dificuldade_alvo',
            field=models.CharField(blank=True, max_length=20, null=True),
        ),
        migrations.AddField(
            model_name='conquista',
            name='tipo_desafio_alvo',
            field=models.CharField(blank=True, max_length=10, null=True),
        ),
        migrations.AddField(
            model_name='conquista',
            name='pomodoro_minutos',
            field=models.SmallIntegerField(default=60),
        ),
        migrations.RunPython(seed_dynamic_rules, migrations.RunPython.noop),
    ]
